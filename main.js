(()=>{"use strict";var t=".popup__form",e={formSelector:t,inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},n=document.querySelector(".profile__avatar-image"),r={name:document.querySelector(".profile__name"),job:document.querySelector(".profile__job"),avatar:n},o=document.querySelector(".profile__button_type_edit"),i=".popup_type_edit-profile",u=document.querySelector(i),a=u.querySelector(".popup__input_type_name"),c=u.querySelector(".popup__input_type_job"),l=document.querySelector(".profile__avatar-button"),s=".popup_type_add-card",f=document.querySelector(s),p=document.querySelector(".profile__button_type_add"),y=(f.querySelector(t),{baseUrl:"https://mesto.nomoreparties.co/v1/".concat("cohort-65"),headers:{authorization:"e15cec99-d6b9-42d3-8bac-fea59fe72095","Content-Type":"application/json"}});function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function b(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==h(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==h(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===h(o)?o:String(o)),r)}var o}var _=function(){function t(e,n,r,o,i,u){var a=e.name,c=e.link,l=e.likes,s=e.owner,f=e.createdAt,p=e._id;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=a,this._link=c,this._likes=l,this._templateSelector=n,this._handleCardClick=r,this._handleDeleteCard=o,this._handleLikeCard=i,this._owner=s,this._createdAt=f,this._id=p,this._userId=u,this._isLiked=this._checkIsLiked()}var e,n;return e=t,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button");var t=this._element.querySelector(".card__image");return t.src=this._link,t.alt=this._name,this._element.querySelector(".card__title").textContent=this._name,this.setLikes(),this._owner._id!==this._userId&&this._element.querySelector(".card__delete-button").remove(),this._setEventlisteners(),this._element}},{key:"_setEventlisteners",value:function(){var t=this;this._element.querySelector(".card__like-button").addEventListener("click",(function(){return t._likeCard()})),this._element.querySelector(".card__image").addEventListener("click",(function(){return t._handleCardClick(t._link,t._name)})),this._element.querySelector(".card__delete-button")&&this._element.querySelector(".card__delete-button").addEventListener("click",(function(){return t._handleDelete()}))}},{key:"_likeCard",value:function(){this._handleLikeCard(this._id,this._isLiked)}},{key:"blockLikeButton",value:function(){this._likeButton.disabled=!0}},{key:"unblockLikeButton",value:function(){this._likeButton.disabled=!1}},{key:"_handleDelete",value:function(){this._handleDeleteCard(this._id)}},{key:"_checkIsLiked",value:function(){var t=this;return this._likes.some((function(e){return e._id===t._userId}))}},{key:"setLikes",value:function(t){var e=this._element.querySelector(".card__like-count"),n=this._element.querySelector(".card__like-button");t&&(this._likes=t,this._isLiked=this._checkIsLiked()),e.textContent=this._likes.length,this._isLiked?n.classList.add("card__like-button_active"):n.classList.remove("card__like-button_active")}},{key:"delete",value:function(){this._element.remove(),this._element=null}}])&&b(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function d(t){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d(t)}function v(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==d(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==d(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===d(o)?o:String(o)),r)}var o}var m=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._formElement=n,this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var e,n;return e=t,(n=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"_setEventListeners",value:function(){var t=this;this._inputElements.forEach((function(e){e.addEventListener("input",(function(){t._isValid(e),t._toggleButtonState()}))})),this._toggleButtonState()}},{key:"_isValid",value:function(t){t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)}},{key:"_showInputError",value:function(t,e){var n=this._formElement.querySelector(".".concat(t.id,"-error"));t.classList.add(this._inputErrorClass),n.textContent=e,n.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(t){var e=this._formElement.querySelector(".".concat(t.id,"-error"));t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass),e.textContent=""}},{key:"hideErrors",value:function(){var t=this;this._inputElements.forEach((function(e){t._hideInputError(e)}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableButtonState():this._enableButtonState()}},{key:"disableButtonState",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_enableButtonState",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"_hasInvalidInput",value:function(){return this._inputElements.some((function(t){return!1===t.validity.valid}))}}])&&v(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function S(t){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},S(t)}function k(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==S(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==S(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===S(o)?o:String(o)),r)}var o}var g=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=e,this._container=document.querySelector(n)}var e,n;return e=t,n=[{key:"renderItems",value:function(t){var e=this;t.forEach((function(t){var n=e._renderer(t);e.addItem(n)}))}},{key:"addItem",value:function(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1]?this._container.prepend(t):this._container.append(t)}}],n&&k(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function E(t){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},E(t)}function w(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==E(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==E(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===E(o)?o:String(o)),r)}var o}var j=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._popupCloseButton=this._popup.querySelector(".popup__cancel-button")}var e,n;return e=t,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(t){"Escape"===t.key&&this.close()}},{key:"setEventListeners",value:function(){var t=this;this._popup.addEventListener("mousedown",(function(e){e.target===e.currentTarget&&t.close()})),this._popupCloseButton.addEventListener("click",(function(){t.close()}))}}])&&w(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function O(t){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},O(t)}function P(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==O(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==O(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===O(o)?o:String(o)),r)}var o}function C(){return C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=B(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},C.apply(this,arguments)}function L(t,e){return L=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},L(t,e)}function B(t){return B=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},B(t)}var q=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&L(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=B(r);if(o){var n=B(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===O(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,t))._figureElement=e._popup.querySelector(".popup__image"),e._captionElement=e._popup.querySelector(".popup__image-caption"),e}return e=u,(n=[{key:"open",value:function(t,e){this._figureElement.src=t,this._figureElement.alt=e,this._captionElement.textContent=e,C(B(u.prototype),"open",this).call(this)}}])&&P(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(j);function T(t){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},T(t)}function R(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==T(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==T(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===T(o)?o:String(o)),r)}var o}function I(){return I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=U(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},I.apply(this,arguments)}function x(t,e){return x=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},x(t,e)}function U(t){return U=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},U(t)}var A=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&x(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=U(r);if(o){var n=U(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===T(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,t))._handleSubmit=e,r._form=r._popup.querySelector(".popup__form"),r._inputValues={},r._handleOpenForm=n,r.formName=r._form.getAttribute("name"),r._allInputs=r._form.querySelectorAll(".popup__input"),r._submitButton=r._form.querySelector(".popup__save-button"),r._originalButtonText=r._submitButton.textContent,r}return e=u,n=[{key:"_getInputValues",value:function(){var t=this;return this._allInputs.forEach((function(e){t._inputValues[e.name]=e.value})),this._inputValues}},{key:"setEventListeners",value:function(){var t=this;I(U(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault(),t._submit()}))}},{key:"_submit",value:function(){this._handleSubmit(this._getInputValues(),this._submitButton)}},{key:"blockSubmitButton",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Сохранение...";this._blockedButtonText=t,this._submitButton.disabled=!0,this._submitButton.textContent=this._blockedButtonText}},{key:"unblockSubmitButton",value:function(){this._submitButton.disabled=!1,this._submitButton.textContent=this._originalButtonText}},{key:"close",value:function(){I(U(u.prototype),"close",this).call(this),this._form.reset()}},{key:"open",value:function(){I(U(u.prototype),"open",this).call(this),this._handleOpenForm()}}],n&&R(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(j);function D(t){return D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},D(t)}function N(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==D(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==D(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===D(o)?o:String(o)),r)}var o}function V(){return V="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=F(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(arguments.length<3?t:n):o.value}},V.apply(this,arguments)}function J(t,e){return J=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},J(t,e)}function F(t){return F=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},F(t)}var G=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&J(t,e)}(u,t);var e,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=F(r);if(o){var n=F(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===D(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,t))._handleSubmit=e,n._button=n._popup.querySelector(".popup__save-button"),n}return e=u,(n=[{key:"setEventListeners",value:function(){var t=this;V(F(u.prototype),"setEventListeners",this).call(this),this._button.addEventListener("click",(function(){t._handleSubmit(t._target)}))}},{key:"setTarget",value:function(t){this._target=t}}])&&N(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(j);function H(t){return H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},H(t)}function z(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==H(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==H(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===H(o)?o:String(o)),r)}var o}var M=function(){function t(e){var n=e.nameElement,r=e.jobElement,o=e.avatarElement;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nameElement=n,this._jobElement=r,this._avatarElement=o}var e,n;return e=t,(n=[{key:"fill",value:function(t){var e=t.name,n=t.about,r=t.avatar,o=t.cohort,i=t._id;this._name=e,this._job=n,this._avatar=r,this._cohort=o,this.id=i}},{key:"getUserInfo",value:function(){return{name:this._name,job:this._job}}},{key:"renderName",value:function(){this._nameElement.textContent=this._name}},{key:"renderJob",value:function(){this._jobElement.textContent=this._job}},{key:"renderAvatar",value:function(){this._avatarElement.src=this._avatar}}])&&z(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function K(t){return K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},K(t)}function Q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==K(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==K(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===K(o)?o:String(o)),r)}var o}var W={},X={};function Y(t){var e=new _(t,"#card",Z,$,tt,rt.id,(function(t){return nt.setLike(t)}),(function(t){return nt.deleteLike(t)}));return X[t._id]=e,e.generateCard()}function Z(t,e){ct.open(t,e)}function $(t){lt.setTarget(t),lt.open()}function tt(t,e){X[t].blockLikeButton(),nt.toggleLike(t,e).then((function(e){X[t].setLikes(e)})).catch((function(t){return console.error(t)})).finally((function(){X[t].unblockLikeButton()}))}function et(){W[this.formName].hideErrors(),W[this.formName].disableButtonState()}var nt=new(function(){function t(e){var n=e.baseUrl,r=e.headers;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl=n,this._headers=r}var e,n;return e=t,(n=[{key:"_requestResult",value:function(t){return t.ok?t.json():Promise.reject("Что-то пошло не так: Ошибка ".concat(t.status," - ").concat(t.statusText))}},{key:"getUserInfo",value:function(){var t=this,e="".concat(this._baseUrl,"/users/me");return fetch(e,{method:"GET",headers:this._headers}).then((function(e){return t._requestResult(e)}))}},{key:"setUserInfo",value:function(t){var e=this,n=t.name,r=t.job,o="".concat(this._baseUrl,"/users/me");return fetch(o,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:n,about:r})}).then((function(t){return e._requestResult(t)}))}},{key:"changeAvatar",value:function(t){var e=this,n="".concat(this._baseUrl,"/users/me/avatar");return fetch(n,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((function(t){return e._requestResult(t)}))}},{key:"getInitialCards",value:function(){var t=this,e="".concat(this._baseUrl,"/cards");return fetch(e,{method:"GET",headers:this._headers}).then((function(e){return t._requestResult(e)}))}},{key:"addNewCard",value:function(t){var e=this,n=t.name,r=t.link,o="".concat(this._baseUrl,"/cards");return fetch(o,{method:"POST",headers:this._headers,body:JSON.stringify({name:n,link:r})}).then((function(t){return e._requestResult(t)}))}},{key:"deleteCard",value:function(t){var e=this,n="".concat(this._baseUrl,"/cards/").concat(t);return fetch(n,{method:"DELETE",headers:this._headers}).then((function(t){return e._requestResult(t)}))}},{key:"setLike",value:function(t){var e=this,n="".concat(this._baseUrl,"/cards/").concat(t,"/likes");return fetch(n,{method:"PUT",headers:this._headers}).then((function(t){return e._requestResult(t)}))}},{key:"deleteLike",value:function(t){var e=this,n="".concat(this._baseUrl,"/cards/").concat(t,"/likes");return fetch(n,{method:"DELETE",headers:this._headers}).then((function(t){return e._requestResult(t)}))}},{key:"toggleLike",value:function(t,e){return e?this.deleteLike(t).then((function(t){return t.likes})):this.setLike(t).then((function(t){return t.likes}))}}])&&Q(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}())(y),rt=new M({nameElement:r.name,jobElement:r.job,avatarElement:r.avatar}),ot=new g(Y,".cards"),it=new A(i,(function(t){it.blockSubmitButton(),nt.setUserInfo(t).then((function(t){rt.fill(t),rt.renderName(),rt.renderJob(),it.close()})).catch((function(t){return console.error(t)})).finally((function(){it.unblockSubmitButton()}))}),et),ut=new A(".popup_type_change-avatar",(function(t){ut.blockSubmitButton(),nt.changeAvatar(t.link).then((function(t){rt.fill(t),rt.renderAvatar(),ut.close()})).catch((function(t){return console.error(t)})).finally((function(){ut.unblockSubmitButton()}))}),et),at=new A(s,(function(t){at.blockSubmitButton(),nt.addNewCard(t).then((function(t){ot.addItem(Y(t),!0),at.close()})).catch((function(t){return console.error(t)})).finally((function(){at.unblockSubmitButton()}))}),et),ct=new q(".popup_type_image");it.setEventListeners();var lt=new G(".popup_type_confirm",(function(t){nt.deleteCard(t).then((function(){X[t].delete(),lt.close()})).catch((function(t){return console.error(t)}))}));Promise.all([nt.getUserInfo(),nt.getInitialCards()]).then((function(t){rt.fill(t[0]),rt.renderName(),rt.renderJob(),rt.renderAvatar(),ot.renderItems(t[1])})).catch((function(t){return console.error(t)})),it.setEventListeners(),o.addEventListener("click",(function(){var t=rt.getUserInfo();a.value=t.name,c.value=t.job,it.open(),a.dispatchEvent(new Event("input")),c.dispatchEvent(new Event("input"))})),ut.setEventListeners(),l.addEventListener("click",(function(){ut.open()})),at.setEventListeners(),p.addEventListener("click",(function(){at.open()})),lt.setEventListeners(),ct.setEventListeners(),function(t){Array.from(document.querySelectorAll(t.formSelector)).forEach((function(e){var n=new m(t,e);W[e.getAttribute("name")]=n,n.enableValidation()}))}(e)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RCxHQUFJNEQsY0FBZTVELEdBQUk2RCxvQkFDakNqRCxNQUFLLFNBQUNrRCxHQUNML0QsR0FBU2dELEtBQUtlLEVBQVEsSUFDdEIvRCxHQUFTaUQsYUFDVGpELEdBQVNrRCxZQUNUbEQsR0FBU3NELGVBQ1RWLEdBQWFvQixZQUFZRCxFQUFRLEdBQ25DLElBQ0NqRCxPQUFNLFNBQUNDLEdBQUcsT0FBS0MsUUFBUUMsTUFBTUYsRUFBSSxJQU1wQzhCLEdBQWlCWSxvQkFFakJ4TyxFQUFrQnVELGlCQUFpQixTQUFTLFdBRzFDLElBQUF5TCxFQURFakUsR0FBUzZELGNBREZ6TyxFQUFpQnNDLE1BQUt1TSxFQUE1Qm5QLEtBQW1DTyxFQUFnQnFDLE1BQUt1TSxFQUExQmxQLElBR2pDOE4sR0FBaUJ2QyxPQUNqQmxMLEVBQWlCOE8sY0FBYyxJQUFJQyxNQUFNLFVBQ3pDOU8sRUFBZ0I2TyxjQUFjLElBQUlDLE1BQU0sU0FDMUMsSUFHQWYsR0FBa0JLLG9CQUVsQm5PLEVBQW1Ca0QsaUJBQWlCLFNBQVMsV0FDM0M0SyxHQUFrQjlDLE1BQ3BCLElBR0FpRCxHQUFhRSxvQkFFYmhPLEVBQWMrQyxpQkFBaUIsU0FBUyxXQUN0QytLLEdBQWFqRCxNQUNmLElBTUFFLEdBQXNCaUQsb0JBR3RCcEQsR0FBV29ELG9CQXBPWCxTQUF1QnJQLEdBQ0EyRixNQUFNQyxLQUN6QnJGLFNBQVNzRixpQkFBaUI3RixFQUFjRCxlQUU3QmlHLFNBQVEsU0FBQ2QsR0FDcEIsSUFBTThLLEVBQU8sSUFBSWhMLEVBQWNoRixFQUFla0YsR0FDOUNxRyxFQUFlckcsRUFBWTBFLGFBQWEsU0FBV29HLEVBQ25EQSxFQUFLQyxrQkFDUCxHQUNGLENBbU9BQyxDQUFjbFEsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3lhbmRleF9wcmFrdGlrdW0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3lhbmRleF9wcmFrdGlrdW0vLi9zcmMvdXRpbHMvYXBpQ29uZmlnLmpzIiwid2VicGFjazovL3lhbmRleF9wcmFrdGlrdW0vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3lhbmRleF9wcmFrdGlrdW0vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3lhbmRleF9wcmFrdGlrdW0vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3lhbmRleF9wcmFrdGlrdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly95YW5kZXhfcHJha3Rpa3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8veWFuZGV4X3ByYWt0aWt1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8veWFuZGV4X3ByYWt0aWt1bS8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qcyIsIndlYnBhY2s6Ly95YW5kZXhfcHJha3Rpa3VtLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8veWFuZGV4X3ByYWt0aWt1bS8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly95YW5kZXhfcHJha3Rpa3VtLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog0K3Qu9C10LzQtdC90YLRiyDRgdGC0YDQsNC90LjRhtGLINC4INC40YUg0YHQtdC70LXQutGC0L7RgNGLXG4gKi9cbi8vINCa0L7QvdGC0LXQudC90LXRgCDRgSDQutCw0YDRgtC+0YfQutCw0LzQuFxuZXhwb3J0IGNvbnN0IGNhcmRzU2VsZWN0b3IgPSBcIi5jYXJkc1wiO1xuZXhwb3J0IGNvbnN0IGNhcmRUZW1wbGF0ZVNlbGVjdG9yID0gXCIjY2FyZFwiO1xuXG4vLyDQntCx0YnQuNC1INGN0LvQtdC80LXQvdGC0Ysg0YTQvtGA0LxcbmNvbnN0IGZvcm1TZWxlY3RvciA9IFwiLnBvcHVwX19mb3JtXCI7XG5jb25zdCBpbnB1dFNlbGVjdG9yID0gXCIucG9wdXBfX2lucHV0XCI7XG5jb25zdCBzdWJtaXRCdXR0b25TZWxlY3RvciA9IFwiLnBvcHVwX19zYXZlLWJ1dHRvblwiO1xuY29uc3QgaW5hY3RpdmVCdXR0b25DbGFzcyA9IFwicG9wdXBfX3NhdmUtYnV0dG9uX2Rpc2FibGVkXCI7XG5jb25zdCBpbnB1dEVycm9yQ2xhc3MgPSBcInBvcHVwX19pbnB1dF90eXBlX2Vycm9yXCI7XG5jb25zdCBlcnJvckNsYXNzID0gXCJwb3B1cF9faW5wdXQtZXJyb3JfYWN0aXZlXCI7XG5leHBvcnQgY29uc3QgZm9ybVNlbGVjdG9ycyA9IHtcbiAgZm9ybVNlbGVjdG9yLFxuICBpbnB1dFNlbGVjdG9yLFxuICBzdWJtaXRCdXR0b25TZWxlY3RvcixcbiAgaW5hY3RpdmVCdXR0b25DbGFzcyxcbiAgaW5wdXRFcnJvckNsYXNzLFxuICBlcnJvckNsYXNzLFxufTtcblxuLyoqINCt0LvQtdC80LXQvdGC0Ysg0YHRgtGA0LDQvdC40YbRiyAqLyAvLyDQoNC10LTQsNGC0LrQuNGA0L7QstCw0L3QuNC1INC40L3RhNC+0YDQvNCw0YbQuNC4INC+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtVxuY29uc3QgcHJvZmlsZUF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYXZhdGFyLWltYWdlXCIpO1xuY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX25hbWVcIik7XG5jb25zdCBwcm9maWxlSm9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19qb2JcIik7XG5leHBvcnQgY29uc3QgcHJvZmlsZUVsZW1lbnRzID0ge1xuICBuYW1lOiBwcm9maWxlTmFtZSxcbiAgam9iOiBwcm9maWxlSm9iLFxuICBhdmF0YXI6IHByb2ZpbGVBdmF0YXIsXG59O1xuXG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5wcm9maWxlX19idXR0b25fdHlwZV9lZGl0XCJcbik7XG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXRQb3B1cFNlbGVjdG9yID0gXCIucG9wdXBfdHlwZV9lZGl0LXByb2ZpbGVcIjtcbmNvbnN0IHByb2ZpbGVFZGl0UG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgcHJvZmlsZUVkaXRQb3B1cFNlbGVjdG9yXG4pO1xuXG4vL2V4cG9ydCBjb25zdCBwcm9maWxlRWRpdEZvcm0gPSBwcm9maWxlRWRpdFBvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Zvcm1cIik7XG5leHBvcnQgY29uc3QgcHJvZmlsZU5hbWVJbnB1dCA9IHByb2ZpbGVFZGl0UG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gIFwiLnBvcHVwX19pbnB1dF90eXBlX25hbWVcIlxuKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlSm9iSW5wdXQgPSBwcm9maWxlRWRpdFBvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5wb3B1cF9faW5wdXRfdHlwZV9qb2JcIlxuKTtcblxuLy8g0J/QvtC/0LDQvyDRgSDQvtCx0L3QvtCy0LvQtdC90LjQtdC8INCw0LLQsNGC0LDRgNCwXG5leHBvcnQgY29uc3QgYXZhdGFyQ2hhbmdlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgXCIucHJvZmlsZV9fYXZhdGFyLWJ1dHRvblwiXG4pO1xuZXhwb3J0IGNvbnN0IGF2YXRhckNoYW5nZVBvcHVwU2VsZWN0b3IgPSBcIi5wb3B1cF90eXBlX2NoYW5nZS1hdmF0YXJcIjtcblxuLy8g0JTQvtCx0LDQstC70LXQvdC40LUg0L3QvtCy0YvRhSDQutCw0YDRgtC+0YfQtdC6XG5leHBvcnQgY29uc3QgbmV3Q2FyZFBvcHVwU2VsZWN0b3IgPSBcIi5wb3B1cF90eXBlX2FkZC1jYXJkXCI7XG5leHBvcnQgY29uc3QgbmV3Q2FyZFBvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmV3Q2FyZFBvcHVwU2VsZWN0b3IpO1xuZXhwb3J0IGNvbnN0IG5ld0NhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi5wcm9maWxlX19idXR0b25fdHlwZV9hZGRcIlxuKTtcbmV4cG9ydCBjb25zdCBuZXdDYXJkRm9ybSA9IG5ld0NhcmRQb3B1cEVsZW1lbnQucXVlcnlTZWxlY3Rvcihmb3JtU2VsZWN0b3IpO1xuLy9leHBvcnQgY29uc3QgbmV3Q2FyZFRpdGxlID0gbmV3Q2FyZFBvcHVwLnF1ZXJ5U2VsZWN0b3IoXG4vLyAgXCIucG9wdXBfX2lucHV0X3R5cGVfdGl0bGVcIlxuLy8pO1xuLy8gZXhwb3J0IGNvbnN0IG5ld0NhcmRMaW5rID0gbmV3Q2FyZFBvcHVwLnF1ZXJ5U2VsZWN0b3IoXG4vLyAgIFwiLnBvcHVwX19pbnB1dF90eXBlX2xpbmtcIlxuLy8gKTtcblxuLy8g0J/QvtC/0LDQvyDRgSDRg9Cy0LXQu9C40YfQtdC90L3Ri9C8INC40LfQvtCx0YDQsNC20LXQvdC40LXQvFxuZXhwb3J0IGNvbnN0IGltYWdlUG9wdXBTZWxlY3RvciA9IFwiLnBvcHVwX3R5cGVfaW1hZ2VcIjtcblxuLy8g0J/QvtC/0LDQvyDRgSDQv9C+0LTRgtCy0LXRgNC20LTQtdC90LjQtdC8XG5leHBvcnQgY29uc3QgY29uZmlybWF0aW9uUG9wdXBTZWxlY3RvciA9IFwiLnBvcHVwX3R5cGVfY29uZmlybVwiO1xuIiwiLy8g0J3QsNGB0YLRgNC+0LnQutC4INC00LvRjyDQv9C+0LTQutC70Y7Rh9C10L3QuNGPINC6INGB0LXRgNCy0LXRgNGDXG5jb25zdCB0b2tlbiA9IFwiZTE1Y2VjOTktZDZiOS00MmQzLThiYWMtZmVhNTlmZTcyMDk1XCI7XG5jb25zdCBjb2hvcnRJZCA9IFwiY29ob3J0LTY1XCI7XG5leHBvcnQgY29uc3QgYXBpQ29uZmlnID0ge1xuICBiYXNlVXJsOiBgaHR0cHM6Ly9tZXN0by5ub21vcmVwYXJ0aWVzLmNvL3YxLyR7Y29ob3J0SWR9YCxcbiAgaGVhZGVyczoge1xuICAgIGF1dGhvcml6YXRpb246IHRva2VuLFxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICB9LFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xuICAvKipcbiAgICog0J7RgtCy0LXRh9Cw0LXRgiDQt9CwINGB0L7Qt9C00LDQvdC40LUg0Lgg0YTRg9C90LrRhtC40L7QvdC40YDQvtCy0LDQvdC40LUg0LrQsNGA0YLQvtGH0LrQuFxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9INCe0LHRitC10LrRgiDRgSDQtNCw0L3QvdGL0LzQuCDQutCw0YDRgtC+0YfQutC4OlxuICAgKiAtIG5hbWUgLSDQntGC0L7QsdGA0LDQttCw0LXQvNGL0Lkg0LfQsNCz0L7Qu9C+0LLQvtC6INC60LDRgNGC0L7Rh9C60LhcbiAgICogLSBsaW5rIC0g0KHRgdGL0LvQutCwINC90LAg0LjQt9C+0LHRgNCw0LbQtdC90LjQtVxuICAgKiAtIGxpa2VzIC0g0JzQsNGB0YHQuNCyINGBINC+0LHRitC10LrRgtCw0LzQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSwg0L/QvtGB0YLQsNCy0LjQstGI0LjQvNC4INC70LDQudC6XG4gICAqIC0gb3duZXIgLSDQntCx0YrQtdC60YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLdCy0LvQsNC00LXQu9GM0YbQsFxuICAgKiAtIGNyZWF0ZWRBdCAtINCS0YDQtdC80Y8g0YHQvtC30LTQsNC90LjRjyDQutCw0YDRgtC+0YfQutC4XG4gICAqIC0gX2lkIC0gaWQg0LrQsNGA0YLQvtGH0LrQuFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGVTZWxlY3RvciAtINCh0LXQu9C10LrRgtC+0YAgdGVtcGxhdGUt0Y3Qu9C10LzQtdC90YLQsCDRgSDRiNCw0LHQu9C+0L3QvtC8INC60LDRgNGC0L7Rh9C60LhcbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gaGFuZGxlQ2FyZENsaWNrIC0g0KTRg9C90LrRhtC40Y8t0L7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINC60LvQuNC60LAg0L/QviDQutCw0YDRgtC40L3QutC1XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZURlbGV0ZUNhcmQgLSDQpNGD0L3QutGG0LjRjy3QvtCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQvdC+0L/QutC4INGD0LTQsNC70LXQvdC40Y8g0LrQsNGA0YLQvtGH0LrQuFxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVMaWtlQ2FyZCAtINCk0YPQvdC60YbQuNGPLdC+0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDQu9Cw0LnQutCwINC60LDRgNGC0L7Rh9C60LhcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIElEINGC0LXQutGD0YnQtdCz0L4g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICB7IG5hbWUsIGxpbmssIGxpa2VzLCBvd25lciwgY3JlYXRlZEF0LCBfaWQgfSxcbiAgICB0ZW1wbGF0ZVNlbGVjdG9yLFxuICAgIGhhbmRsZUNhcmRDbGljayxcbiAgICBoYW5kbGVEZWxldGVDYXJkLFxuICAgIGhhbmRsZUxpa2VDYXJkLFxuICAgIHVzZXJJZFxuICApIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICB0aGlzLl9saW5rID0gbGluaztcbiAgICB0aGlzLl9saWtlcyA9IGxpa2VzO1xuICAgIHRoaXMuX3RlbXBsYXRlU2VsZWN0b3IgPSB0ZW1wbGF0ZVNlbGVjdG9yO1xuICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGhhbmRsZUNhcmRDbGljaztcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVDYXJkID0gaGFuZGxlRGVsZXRlQ2FyZDtcbiAgICB0aGlzLl9oYW5kbGVMaWtlQ2FyZCA9IGhhbmRsZUxpa2VDYXJkO1xuICAgIHRoaXMuX293bmVyID0gb3duZXI7XG4gICAgdGhpcy5fY3JlYXRlZEF0ID0gY3JlYXRlZEF0O1xuICAgIHRoaXMuX2lkID0gX2lkO1xuICAgIHRoaXMuX3VzZXJJZCA9IHVzZXJJZDtcbiAgICB0aGlzLl9pc0xpa2VkID0gdGhpcy5fY2hlY2tJc0xpa2VkKCk7XG4gIH1cblxuICAvKipcbiAgICog0J/QvtC70YPRh9Cw0LXRgiDRiNCw0LHQu9C+0L0g0YHQvtC30LTQsNCy0LDQtdC80L7QuSDQutCw0YDRgtC+0YfQutC4INC40Lcg0YDQsNC30LzQtdGC0LrQuFxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSDQn9GD0YHRgtC+0Lkg0Y3Qu9C10LzQtdC90YIsINGB0L7Qt9C00LDQvdC90YvQuSDQuNC3INGI0LDQsdC70L7QvdCwXG4gICAqL1xuXG4gIF9nZXRUZW1wbGF0ZSgpIHtcbiAgICBjb25zdCBjYXJkVGVtcGxhdGUgPSBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fdGVtcGxhdGVTZWxlY3RvcilcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcbiAgICByZXR1cm4gY2FyZFRlbXBsYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqINCh0L7Qt9C00LDQtdGCINC30LDQv9C+0LvQvdC10L3QvdGD0Y4g0L/QviDQuNGB0YXQvtC00L3Ri9C8INC00LDQvdC90YvQvCDQutCw0YDRgtC+0YfQutGDXG4gICAqIEByZXR1cm5zIHtvYmplY3R9INCa0LDRgNGC0L7Rh9C60LAsINCz0L7RgtC+0LLQsNGPINC00LvRjyDQstGB0YLQsNCy0LrQuCDQsiDRgNCw0LfQvNC10YLQutGDXG4gICAqL1xuXG4gIGdlbmVyYXRlQ2FyZCgpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xuXG4gICAgLy8g0JfQsNC/0L7Qu9C90LXQvdC40LUg0YHQvtC00LXRgNC20LjQvNC+0LPQvlxuICAgIGNvbnN0IGltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xuICAgIGltYWdlLnNyYyA9IHRoaXMuX2xpbms7XG4gICAgaW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xuICAgIHRoaXMuc2V0TGlrZXMoKTtcbiAgICBpZiAodGhpcy5fb3duZXIuX2lkICE9PSB0aGlzLl91c2VySWQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19kZWxldGUtYnV0dG9uXCIpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIC8vINCe0LHRgNCw0LHQvtGC0YfQuNC60Lgg0L3QsNC20LDRgtC40LlcbiAgICB0aGlzLl9zZXRFdmVudGxpc3RlbmVycygpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICog0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10YIg0L3QtdC+0LHRhdC+0LTQuNC80YvQtSDRgdC70YPRiNCw0YLQtdC70Lgg0YHQvtCx0YvRgtC40Lkg0L3QsCDRjdC70LXQvNC10L3RgtGLINC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIF9zZXRFdmVudGxpc3RlbmVycygpIHtcbiAgICB0aGlzLl9lbGVtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9saWtlQ2FyZCgpKTtcblxuICAgIC8vIHRoaXMuX2J1dHRvbkxpa2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldnQpID0+IHtcbiAgICAvLyAgIHRoaXMuX2xpa2VDYXJkKCk7XG4gICAgLy8gfSk7XG4gICAgLy8gdGhpcy5fZWxlbWVudFxuICAgIC8vICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiKVxuICAgIC8vICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLl9kZWxldGVDYXJkKCkpO1xuICAgIHRoaXMuX2VsZW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+XG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayh0aGlzLl9saW5rLCB0aGlzLl9uYW1lKVxuICAgICAgKTtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2RlbGV0ZS1idXR0b25cIikpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnRcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiKVxuICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMuX2hhbmRsZURlbGV0ZSgpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdGCINC70LDQudC6INC60LDRgNGC0L7Rh9C60LhcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IC0g0KHQvtCx0YvRgtC40LUg0LrQu9C40LrQsFxuICAgKi9cbiAgX2xpa2VDYXJkKCkge1xuICAgIHRoaXMuX2hhbmRsZUxpa2VDYXJkKHRoaXMuX2lkLCB0aGlzLl9pc0xpa2VkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQkdC70L7QutC40YDRg9C10YIg0LrQvdC+0L/QutGDINC70LDQudC60LBcbiAgICovXG4gIGJsb2NrTGlrZUJ1dHRvbigpIHtcbiAgICB0aGlzLl9saWtlQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQoNCw0LfQsdC70L7QutC40YDRg9C10YIg0LrQvdC+0L/QutGDINC70LDQudC60LBcbiAgICovXG4gIHVuYmxvY2tMaWtlQnV0dG9uKCkge1xuICAgIHRoaXMuX2xpa2VCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQntCx0YDQsNCx0LDRgtGL0LLQsNC10YIg0L3QsNC20LDRgtC40LUg0L3QsCDRg9C00LDQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIF9oYW5kbGVEZWxldGUoKSB7XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2FyZCh0aGlzLl9pZCk7XG4gIH1cblxuICAvKipcbiAgICog0J7Qv9GA0LXQtNC10LvRj9C10YIsINC10YHRgtGMINC70Lgg0LvQsNC50Log0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC90LAg0LrQsNGA0YLQvtGH0LrQtVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIF9jaGVja0lzTGlrZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpa2VzLnNvbWUoKHBlcnNvbikgPT4gcGVyc29uLl9pZCA9PT0gdGhpcy5fdXNlcklkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQntCx0YDQsNCx0LDRgtGL0LLQsNC10YIg0LzQsNGB0YHQuNCyINC70LDQudC60L7QsiDQutCw0YDRgtC+0YfQutC4OlxuICAgKiAtINC/0YDQuCDQvdCw0LvQuNGH0LjQuCDQsNGA0LPRg9C80LXQvdGC0LAg0YHQvtGF0YDQsNC90Y/QtdGCINC90L7QstGL0LUg0LvQsNC50LrQuFxuICAgKiAtINC30LDQv9C40YHRi9Cy0LDQtdGCINC60L7Qu9C40YfQtdGB0YLQstC+INC70LDQudC60L7QsiDQsiDRgNCw0LfQvNC10YLQutGDXG4gICAqIC0g0YHQvtGF0YDQsNC90Y/QtdGCINC4INC/0L7QutCw0LfRi9Cy0LDQtdGCINCyINGA0LDQt9C80LXRgtC60LUg0YLQtdC60YPRidC10LUg0YHQvtGB0YLRj9C90LjQtSDQu9Cw0LnQutCwINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBsaWtlcyAtINCd0L7QstGL0LUg0LvQsNC50LrQuCDQutCw0YDRgtC+0YfQutC4ICjQvdC10L7QsdGP0LfQsNGC0LXQu9GM0L3Ri9C5INC/0LDRgNCw0LzQtdGC0YApXG4gICAqL1xuICBzZXRMaWtlcyhsaWtlcykge1xuICAgIGNvbnN0IGxpa2VDb3VudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWNvdW50XCIpO1xuICAgIGNvbnN0IGxpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIik7XG5cbiAgICBpZiAobGlrZXMpIHtcbiAgICAgIHRoaXMuX2xpa2VzID0gbGlrZXM7XG4gICAgICB0aGlzLl9pc0xpa2VkID0gdGhpcy5fY2hlY2tJc0xpa2VkKCk7XG4gICAgfVxuXG4gICAgbGlrZUNvdW50LnRleHRDb250ZW50ID0gdGhpcy5fbGlrZXMubGVuZ3RoO1xuXG4gICAgaWYgKHRoaXMuX2lzTGlrZWQpIHtcbiAgICAgIGxpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlrZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQo9C00LDQu9GP0LXRgiDQutCw0YDRgtC+0YfQutGDINC40Lcg0YDQsNC80LXRgtC60LhcbiAgICovXG4gIGRlbGV0ZSgpIHtcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgLyoqXG4gICAqINCe0YLQstC10YfQsNC10YIg0LfQsCDQstCw0LvQuNC00LDRhtC40Y4g0YTQvtGA0LzRiywg0L7RgtC+0LHRgNCw0LbQtdC90LjQtS/RgdC60YDRi9GC0LjQtSDQvtGI0LjQsdC+0LosINC+0YLQvtCx0YDQsNC20LXQvdC40LUg0LrQvdC+0L/QutC4INC+0YLQv9GA0LDQstC60LhcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmb3JtQ2xhc3NlcyAtIEPQtdC70LXQutGC0L7RgNGLINC4INC60LvQsNGB0YHRiyDRjdC70LXQvNC10L3RgtC+0LIg0YTQvtGA0LzRiywg0YTQvtGA0LzQsNGCOlxuICAgKiB7XG4gICAqICAgZm9ybVNlbGVjdG9yLFxuICAgKiAgIGlucHV0U2VsZWN0b3IsXG4gICAqICAgc3VibWl0QnV0dG9uU2VsZWN0b3IsXG4gICAqICAgaW5hY3RpdmVCdXR0b25DbGFzcyxcbiAgICogICBpbnB1dEVycm9yQ2xhc3MsXG4gICAqICAgZXJyb3JDbGFzc1xuICAgKiB9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmb3JtRWxlbWVudCAtINCt0LvQtdC80LXQvdGCINGE0L7RgNC80YtcbiAgICovXG4gIGNvbnN0cnVjdG9yKGZvcm1DbGFzc2VzLCBmb3JtRWxlbWVudCkge1xuICAgIC8vINCk0L7RgNC80LBcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xuICAgIC8vINCh0LXQu9C10LrRgtC+0YDRiyDQuCDQutC70LDRgdGB0YtcbiAgICB0aGlzLl9mb3JtU2VsZWN0b3IgPSBmb3JtQ2xhc3Nlcy5mb3JtU2VsZWN0b3I7XG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGZvcm1DbGFzc2VzLmlucHV0U2VsZWN0b3I7XG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBmb3JtQ2xhc3Nlcy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gZm9ybUNsYXNzZXMuaW5hY3RpdmVCdXR0b25DbGFzcztcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBmb3JtQ2xhc3Nlcy5pbnB1dEVycm9yQ2xhc3M7XG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IGZvcm1DbGFzc2VzLmVycm9yQ2xhc3M7XG4gICAgLy8g0K3Qu9C10LzQtdC90YLRiyDRhNC+0YDQvNGLXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cyA9IEFycmF5LmZyb20oXG4gICAgICB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXG4gICAgKTtcbiAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQmNC90LjRhtC40LjRgNGD0LXRgiDQstCw0LvQuNC00LDRhtC40Y5cbiAgICovXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQo9GB0YLQsNC90LDQstC70LjQstCw0LXRgiDQstGB0LUg0YHQu9GD0YjQsNGC0LXQu9C4INGB0L7QsdGL0YLQuNC5INC90LAg0YTQvtGA0LzRg1xuICAgKi9cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5faXNWYWxpZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyDQntC/0YDQtdC00LXQu9GP0LXRgiDQuNGB0YXQvtC00L3QvtC1INC/0L7Qu9C+0LbQtdC90LjQtSDQutC90L7Qv9C60LhcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqINCf0YDQvtCy0LXRgNGP0LXRgiDRjdC70LXQvNC10L3RgiDRhNC+0YDQvNGLINC90LAg0LLQsNC70LjQtNC90L7RgdGC0Lgg0Lgg0YHQutGA0YvQstCw0LXRgi/QvtGC0L7QsdGA0LDQttCw0LXRgiDQvtGI0LjQsdC60YNcbiAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0RWxlbWVudCAtINCt0LvQtdC80LXQvdGCINGE0L7RgNC80YtcbiAgICovXG4gIF9pc1ZhbGlkKGlucHV0RWxlbWVudCkge1xuICAgIGlmIChpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0J/QvtC60LDQt9GL0LLQsNC10YIg0L7RiNC40LHQutGDINGDINC/0L7Qu9GPINCy0LLQstC+0LTQsFxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRFbGVtZW50IC0g0Y3Qu9C10LzQtdC90YIg0YTQvtGA0LzRi1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JNZXNzYWdlIC0g0KLQtdC60YHRgiDQvtGI0LjQsdC60Lgg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y9cbiAgICovXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkge1xuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcbiAgICApO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICB9XG5cbiAgLyoqXG4gICAqINCh0LrRgNGL0LLQsNC10YIg0L7RiNC40LHQutGDINGDINC/0L7Qu9GPINCy0LLQstC+0LTQsFxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRFbGVtZW50IC0g0Y3Qu9C10LzQtdC90YIg0YTQvtGA0LzRi1xuICAgKi9cbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcbiAgICApO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgfVxuXG4gIGhpZGVFcnJvcnMoKSB7XG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqINCf0LXRgNC10LrQu9GO0YfQsNC10YIg0YHQvtGB0YLQvtGP0L3QuNC1INC60L3QvtC/0LrQuCDRgdCw0LHQvNC40YLQsCDRhNC+0YDQvNGLXG4gICAqL1xuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKSB7XG4gICAgICB0aGlzLmRpc2FibGVCdXR0b25TdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9lbmFibGVCdXR0b25TdGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQntGC0LrQu9GO0YfQsNC10YIg0LrQvdC+0L/QutGDINGB0LDQsdC80LjRgtCwINGE0L7RgNC80YtcbiAgICovXG4gIGRpc2FibGVCdXR0b25TdGF0ZSgpIHtcbiAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICog0JLQutC70Y7Rh9Cw0LXRgiDQutC90L7Qv9C60YMg0YHQsNCx0LzQuNGC0LAg0YTQvtGA0LzRi1xuICAgKi9cbiAgX2VuYWJsZUJ1dHRvblN0YXRlKCkge1xuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICB0aGlzLl9idXR0b25FbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog0J/RgNC+0LLQtdGA0Y/QtdGCINGE0L7RgNC80YMg0L3QsCDQvdCw0LvQuNGH0LjQtSDQvdC10LLQsNC70LjQtNC90YvRhSDQv9C+0LvQtdC5XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5faW5wdXRFbGVtZW50cy5zb21lKFxuICAgICAgKGlucHV0RWxlbWVudCkgPT4gaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkID09PSBmYWxzZVxuICAgICk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xuICAvKipcbiAgICog0J7RgtCy0LXRh9Cw0LXRgiDQt9CwINCy0YvQstC+0LQg0Y3Qu9C10LzQtdC90YLQvtCyINC90LAg0YHRgtGA0LDQvdC40YbRgyDQsiDQvtC/0YDQtdC00LXQu9C10L3QvdC+0Lwg0LHQu9C+0LrQtVxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVuZGVyZXIgLSDQpNGD0L3QutGG0LjRjywg0LrQvtGC0L7RgNCw0Y8g0L7RgtCy0LXRh9Cw0LXRgiDQt9CwINGB0L7Qt9C00LDQvdC40LUg0Lgg0L7RgtGA0LjRgdC+0LLQutGDINC00LDQvdC90YvRhSDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRhaW5lclNlbGVjdG9yIC0g0KHQtdC70LXQutGC0L7RgCDQutC+0L3RgtC10LnQvdC10YDQsCwg0LIg0LrQvtGC0L7RgNGL0Lkg0L3Rg9C20L3QviDQtNC+0LHQsNCy0LvRj9GC0Ywg0YHQvtC30LTQsNC90L3Ri9C1INGN0LvQtdC80LXQvdGC0YtcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBjb250YWluZXJTZWxlY3Rvcikge1xuICAgIC8vIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQodC+0LfQtNCw0LXRgiDQuCDQtNC+0LHQsNCy0LvRj9C10YIg0Y3Qu9C10LzQtdC90YLRiyDQvdCwINGB0YLRgNCw0L3QuNGG0YNcbiAgICogQHBhcmFtIHthcnJheX0gaXRlbXMgLSDQnNCw0YHRgdC40LIg0YEg0LTQsNC90L3Ri9C80LgsINC90LXQvtCx0YXQvtC00LjQvNGL0LzQuCDQtNC70Y8g0YHQvtC30LTQsNC90LjRjyDQutCw0YDRgtC+0YfQtdC6XG4gICAqL1xuICByZW5kZXJJdGVtcyhpdGVtcykge1xuICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9yZW5kZXJlcihpdGVtKTtcbiAgICAgIHRoaXMuYWRkSXRlbShlbGVtZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQlNC+0LHQstC70Y/QtdGCINGN0LvQtdC80LXQvdGCINC90LAg0YHRgtGA0LDQvdC40YbRg1xuICAgKiBAcGFyYW0ge29iamVjdH0gaXRlbSAtINCt0LvQtdC80LXQvdGCINC00LvRjyDQtNC+0LHQsNCy0LvQtdC90LjRj1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzSW52ZXJzZWQgLSDQntC/0YDQtdC00LXQu9GP0LXRgiDQv9C+0YDRj9C00L7QuiDQstGB0YLQsNCy0LrQuCwg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y4gLSDQsiDQutC+0L3QtdGGINC60L7QvdGC0LXQudC90LXRgNCwXG4gICAqL1xuICBhZGRJdGVtKGl0ZW0sIGlzSW52ZXJzZWQgPSBmYWxzZSkge1xuICAgIGlmIChpc0ludmVyc2VkKSB7XG4gICAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZChpdGVtKTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcbiAgLyoqXG4gICAqINCe0YLQstC10YfQsNC10YIg0LfQsCDQvtGC0LrRgNGL0YLQuNC1INC4INC30LDQutGA0YvRgtC40LUg0L/QvtC/0LDQv9CwXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcG9wdXBTZWxlY3RvciAtINCh0LXQu9C10LrRgtC+0YAg0Y3Qu9C10LzQtdC90YLQsCDQv9C+0L/QsNC/0LBcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9wb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3BvcHVwQ2xvc2VCdXR0b24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19jYW5jZWwtYnV0dG9uXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqINCe0YLQutGA0YvQstCw0LXRgiDQv9C+0L/QsNC/XG4gICAqL1xuICBvcGVuKCkge1xuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoXCJwb3B1cF9vcGVuZWRcIik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqINCX0LDQutGA0YvQstCw0LXRgiDQv9C+0L/QsNC/XG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKFwicG9wdXBfb3BlbmVkXCIpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQntCx0YDQsNCx0LDRgtGL0LLQsNC10YIg0L3QsNC20LDRgtC40Y8g0L3QsCBFc2NhcGUg0LTQu9GPINC30LDQutGA0YvRgtC40Y8g0L/QvtC/0LDQv9CwXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldnQgLSDQodC+0LHRi9GC0LjQtSwg0L/QvtC70YPRh9Cw0LXQvNC+0LUg0LjQtyDRgdC70YPRiNCw0YLQtdC70Y9cbiAgICovXG4gIF9oYW5kbGVFc2NDbG9zZShldnQpIHtcbiAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQo9GB0YLQsNC90LDQstC70LjQstCw0LXRgiDRgdC70YPRiNCw0YLQtdC70Lgg0YHQvtCx0YvRgtC40Lkg0L3QsCDRjdC70LXQvNC10L3RgtGLINC/0L7Qv9Cw0L/QsCDQtNC70Y8g0YPQv9GA0LDQstC70LXQvdC40Y8g0LXQs9C+INC30LDQutGA0YvRgtC40LXQvFxuICAgKi9cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZXZ0KSA9PiB7XG4gICAgICBpZiAoZXZ0LnRhcmdldCA9PT0gZXZ0LmN1cnJlbnRUYXJnZXQpIHRoaXMuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3BvcHVwQ2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICAvKipcbiAgICog0J7RgtCy0LXRh9Cw0LXRgiDQt9CwINGA0LDQsdC+0YLRgyDRgSDQv9C+0L/QsNC/0L7QvCwg0YHQvtC00LXRgNC20LDRidC40Lwg0YPQstC10LvQuNGH0LXQvdC90L7QtSDQuNC30L7QsdGA0LDQttC10L3QuNC1XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcG9wdXBTZWxlY3RvciAtINCh0LXQu9C10LrRgtC+0YAg0Y3Qu9C10LzQtdC90YLQsCDRgSDQv9C+0L/QsNC/0L7QvFxuICAgKi9cbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX2ZpZ3VyZUVsZW1lbnQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbWFnZVwiKTtcbiAgICB0aGlzLl9jYXB0aW9uRWxlbWVudCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2ltYWdlLWNhcHRpb25cIik7XG4gIH1cblxuICAvKipcbiAgICog0JfQsNC/0L7Qu9C90Y/QtdGCINC/0L7Qv9Cw0L8g0L3Rg9C20L3Ri9C80Lgg0LfQvdCw0YfQtdC90LjRj9C80Lgg0Lgg0L7RgtC60YDRi9Cy0LDQtdGCINC10LPQvlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW1hZ2VMaW5rIC0g0KHRgdGL0LvQutCwINC90LAg0LrQsNGA0YLQuNC90LrRg1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtINCf0L7QtNC/0LjRgdGMINC60LDRgNGC0LjQvdC60LhcbiAgICovXG4gIG9wZW4oaW1hZ2VMaW5rLCB0ZXh0KSB7XG4gICAgdGhpcy5fZmlndXJlRWxlbWVudC5zcmMgPSBpbWFnZUxpbms7XG4gICAgdGhpcy5fZmlndXJlRWxlbWVudC5hbHQgPSB0ZXh0O1xuICAgIHRoaXMuX2NhcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcblxuICAgIHN1cGVyLm9wZW4oKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XG4gIC8qKlxuICAgKiDQntGC0LLQtdGH0LDQtdGCINC30LAg0YDQsNCx0L7RgtGDINGBINC/0L7Qv9Cw0L/QvtC8LCDRgdC+0LTQtdGA0LbQsNGJ0LjQvCDRhNC+0YDQvNGDXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcG9wdXBTZWxlY3RvciAtINCh0LXQu9C10LrRgtC+0YAg0Y3Qu9C10LzQtdC90YLQsCDRgSDQv9C+0L/QsNC/0L7QvFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVTdWJtaXQgLSDQmtC+0LvQsdC10Log0LTQu9GPINC+0LHRgNCw0LHQvtGC0LrQuCDQvtGC0L/RgNCw0LLQutC4INGE0L7RgNC80YtcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gaGFuZGxlT3BlbkZvcm0gLSDQmtC+0LvQsdC10Log0LTQu9GPINGB0LHRgNC+0YHQsCDRhNC+0YDQvNGLINC/0LXRgNC10LQg0L7RgtC60YDRi9GC0LjQtSDQv9C+0L/QsNC/0LBcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZVN1Ym1pdCwgaGFuZGxlT3BlbkZvcm0pIHtcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXQgPSBoYW5kbGVTdWJtaXQ7XG4gICAgdGhpcy5fZm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Zvcm1cIik7XG4gICAgdGhpcy5faW5wdXRWYWx1ZXMgPSB7fTtcbiAgICB0aGlzLl9oYW5kbGVPcGVuRm9ybSA9IGhhbmRsZU9wZW5Gb3JtO1xuICAgIHRoaXMuZm9ybU5hbWUgPSB0aGlzLl9mb3JtLmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XG4gICAgdGhpcy5fYWxsSW5wdXRzID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLnBvcHVwX19pbnB1dFwiKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX3NhdmUtYnV0dG9uXCIpO1xuICAgIC8vIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvckFsbChcIi5wb3B1cF9faW5wdXRcIik7XG4gICAgdGhpcy5fb3JpZ2luYWxCdXR0b25UZXh0ID0gdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50O1xuICB9XG5cbiAgLyoqXG4gICAqINCh0L7RhdGA0LDQvdGP0LXRgiDQstGB0LUg0L/QvtC70Y8g0LLQstC+0LTQsCDQsiDQvtCx0YrQtdC60YJcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICB0aGlzLl9hbGxJbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgIHRoaXMuX2lucHV0VmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0VmFsdWVzO1xuICB9XG5cbiAgLy8gc2V0SW5wdXRWYWx1ZXMoZGF0YSkge1xuICAvLyAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAvLyAgICAgaWYgKGRhdGFbaW5wdXQubmFtZV0pIHtcbiAgLy8gICAgICAgaW5wdXQudmFsdWUgPSBkYXRhW2lucHV0Lm5hbWVdO1xuICAvLyAgICAgfVxuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgLyoqXG4gICAqINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCINC90LXQvtCx0YXQvtC00LjQvNGL0LUg0YHQu9GD0YjQsNGC0LXQu9C4INC90LAg0Y3Qu9C10LzQtdC90YLRiyDQv9C+0L/QsNC/0LBcbiAgICovXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5fc3VibWl0KCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICog0JLRi9C/0L7Qu9C90Y/QtdGCINC90LXQvtCx0YXQvtC40LzRi9C1INC00LXQudGB0YLQstC40Y8g0L/RgNC4INGB0LDQsdC80LjRgtC1INGE0L7RgNC80YtcbiAgICovXG4gIF9zdWJtaXQoKSB7XG4gICAgLy8gZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gY29uc3QgYnV0dG9uID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19zYXZlLWJ1dHRvblwiKTtcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXQodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSwgdGhpcy5fc3VibWl0QnV0dG9uKTtcbiAgfVxuICAvKipcbiAgICog0JHQu9C+0LrQuNGA0YPQtdGCINC60L3QvtC/0LrRgyDQvtGC0L/RgNCw0LLQutC4INCy0L4g0LLRgNC10LzRjyDQstGL0L/QvtC70L3QtdC90LjRjyDQt9Cw0L/RgNC+0YHQsFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYmxvY2tlZEJ1dHRvblRleHQgLSDQotC10LrRgdGCLCDQvtGC0L7QsdGA0LDQttCw0LXQvNGL0Lkg0L3QsCDQutC90L7Qv9C60LVcbiAgICovXG4gIGJsb2NrU3VibWl0QnV0dG9uKGJsb2NrZWRCdXR0b25UZXh0ID0gXCLQodC+0YXRgNCw0L3QtdC90LjQtS4uLlwiKSB7XG4gICAgdGhpcy5fYmxvY2tlZEJ1dHRvblRleHQgPSBibG9ja2VkQnV0dG9uVGV4dDtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuX2Jsb2NrZWRCdXR0b25UZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGB0L7RgdGC0L7Rj9C90LjQtSDQutC90L7Qv9C60Lgg0L7RgtC/0YDQsNCy0LrQuCDQv9C+0YHQu9C1INCx0LvQvtC60LjRgNC+0LLQutC4XG4gICAqL1xuICB1bmJsb2NrU3VibWl0QnV0dG9uKCkge1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHRoaXMuX29yaWdpbmFsQnV0dG9uVGV4dDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQl9Cw0LrRgNGL0LLQsNC10YIg0L/QvtC/0LDQv1xuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgc3VwZXIuY2xvc2UoKTtcbiAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XG4gIH1cblxuICAvKipcbiAgICog0J7RgtC60YDRi9Cy0LDQtdGCINC/0L7Qv9Cw0L9cbiAgICovXG4gIG9wZW4oKSB7XG4gICAgc3VwZXIub3BlbigpO1xuICAgIHRoaXMuX2hhbmRsZU9wZW5Gb3JtKCk7XG4gIH1cbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhDb25maXJtYXRpb24gZXh0ZW5kcyBQb3B1cCB7XG4gIC8qKlxuICAgKiDQntGC0LLQtdGH0LDQtdGCINC30LAg0LLQt9Cw0LjQvNC+0LTQtdC50YHRgtC40LUg0YEg0L/QvtC/0LDQv9C+0Lwt0L/QvtC00LLQtdGA0LbQtNC10L3QuNC8INC00LXQudGB0YLQstC40Y8gKNCx0LXQtyDRhNC+0YDQvNGLKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcG9wdXBTZWxlY3RvciAtINCh0LXQu9C10LrRgtC+0YAg0Y3Qu9C10LzQtdC90YLQsCDQv9C+0L/QsNC/0LBcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gaGFuZGxlU3VibWl0IC0g0JrQvtC70LHQtdC6INC00LvRjyDQvtCx0YDQsNCx0L7RgtC60Lgg0L3QsNC20LDRgtC40Y8g0L3QsCDQutC90L7Qv9C60YNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZVN1Ym1pdCkge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IGhhbmRsZVN1Ym1pdDtcbiAgICB0aGlzLl9idXR0b24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19zYXZlLWJ1dHRvblwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQo9GB0YLQsNC90LDQstC70LjQstCw0LXRgiDQvdC10L7QsdGF0L7QtNC40LzRi9C1INGB0LvRg9GI0LDRgtC10LvQuCDRgdC+0LHRi9GC0LjQuSDQvdCwINGN0LvQtdC80LXQvdGC0Ysg0L/QvtC/0LDQv9CwXG4gICAqL1xuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuXG4gICAgdGhpcy5fYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVTdWJtaXQodGhpcy5fdGFyZ2V0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQl9Cw0LTQsNC10YIg0YbQtdC70LXQstC+0Lkg0L/QsNGA0LDQvNC10YLRgCwg0YEg0LrQvtGC0L7RgNGL0Lwg0YDQsNCx0L7RgtCw0LXRgiDQv9C+0L/QsNC/INC4INC60L7RgtGA0L7QtSDQstC+0LfQstGA0LDRidCw0LXRgiDQutC+0LvQsdC10LrRg1xuICAgKiBAcGFyYW0geyp9IHRhcmdldCAtINCm0LXQu9C10LLQvtC5INC/0LDRgNCw0LzQtdGC0YBcbiAgICovXG4gIHNldFRhcmdldCh0YXJnZXQpIHtcbiAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcbiAgLyoqXG4gICAqINCe0YLQstC10YfQsNC10YIg0LfQsCDRhdGA0LDQvdC10L3QuNC1LCDQtNC+0YHRgtGD0L8g0Lgg0LLRi9Cy0L7QtCDQuNC90YTQvtGA0LzQsNGG0LjQuCDQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70LVcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSDQntCx0YrQtdC60YIg0YEg0Y3Qu9C10LzQtdC90YLQsNC80Lgg0YHRgtGA0LDQvdC40YbRiyDRgSDQuNC90YTQvtGA0LzQsNGG0LjQtdC5INC+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtTpcbiAgICogLSBuYW1lRWxlbWVudCAtINCi0LXQutGB0YLQvtCy0L7QuSDRjdC70LXQvNC10L3RgiDRgSDQuNC80LXQvdC10Lwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAqIC0gam9iRWxlbWVudCAtINCi0LXQutGB0YLQvtCy0L7QuSDRjdC70LXQvNC10L3RgiDRgSDQvtC/0LjRgdCw0L3QuNC10Lwg0LTQtdGP0YLQtdC70YzQvdC+0YHRgtC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgKiAtIGF2YXRhckVsZW1lbnQgLSDQrdC70LXQvNC10L3RgiBpbWcg0YEg0LDQstCw0YLQsNGA0L7QvCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgbmFtZUVsZW1lbnQsIGpvYkVsZW1lbnQsIGF2YXRhckVsZW1lbnQgfSkge1xuICAgIHRoaXMuX25hbWVFbGVtZW50ID0gbmFtZUVsZW1lbnQ7XG4gICAgdGhpcy5fam9iRWxlbWVudCA9IGpvYkVsZW1lbnQ7XG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudCA9IGF2YXRhckVsZW1lbnQ7XG4gIH1cblxuICAvLyBzZXRVc2VySW5mbyh7IG5hbWUsIGpvYiB9KSB7XG4gIC8vICAgdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQgPSBuYW1lO1xuICAvLyAgIHRoaXMuX2pvYkVsZW1lbnQudGV4dENvbnRlbnQgPSBqb2I7XG4gIC8vIH1cblxuICAvKipcbiAgICog0KHQvtGF0YDQsNC90Y/QtdGCINC/0L7Qu9GD0YfQtdC90L3Rg9GOINC40L3RhNC+0YDQvNCw0YbQuNGOINC+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtVxuICAgKiBAcGFyYW0ge29iamVjdH0g0JrQsNGA0YLQvtGH0LrQsCDQv9C+0LvQt9C+0LLQsNGC0LXQu9GPXG4gICAqL1xuICBmaWxsKHsgbmFtZSwgYWJvdXQsIGF2YXRhciwgY29ob3J0LCBfaWQgfSkge1xuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICAgIHRoaXMuX2pvYiA9IGFib3V0O1xuICAgIHRoaXMuX2F2YXRhciA9IGF2YXRhcjtcbiAgICB0aGlzLl9jb2hvcnQgPSBjb2hvcnQ7XG4gICAgdGhpcy5pZCA9IF9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQktC+0LfQstGA0LDRidCw0LXRgiDQuNC80Y8g0Lgg0YDQvtC0INC00LXRj9GC0LXQu9GM0L3QvtGB0YLQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLl9uYW1lLFxuICAgICAgam9iOiB0aGlzLl9qb2IsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQktGL0LLQvtC00LjRgiDQuNC80Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC90LAg0YHRgtGA0LDQvdC40YbRg1xuICAgKi9cbiAgcmVuZGVyTmFtZSgpIHtcbiAgICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG4gIH1cblxuICAvKipcbiAgICog0JLRi9Cy0L7QtNC40YIg0YDQvtC0INC00LXQudGB0YLQtdC70YzQvdC+0YHRgtC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdCwINGB0YLRgNCw0L3QuNGG0YNcbiAgICovXG4gIHJlbmRlckpvYigpIHtcbiAgICB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5fam9iO1xuICB9XG5cbiAgLyoqXG4gICAqINCS0YvQstC+0LTQuNGCINCw0LLQsNGC0LDRgCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L3QsCDRgdGC0YDQsNC90LjRhtGDXG4gICAqL1xuICByZW5kZXJBdmF0YXIoKSB7XG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMgPSB0aGlzLl9hdmF0YXI7XG4gIH1cbn1cbiIsIi8vINCY0LzQv9C+0YDRgiDQtNCw0L3QvdGL0YUg0LjQtyDQtNGA0YPQs9C40YUg0LzQvtC00YPQu9C10LlcbmltcG9ydCB7XG4gIGNhcmRzU2VsZWN0b3IsXG4gIGNhcmRUZW1wbGF0ZVNlbGVjdG9yLFxuICBmb3JtU2VsZWN0b3JzLCAvLyDRgdC10LvQtdC60YLQvtGA0Ysg0Lgg0LrQu9Cw0YHRgdGLINGN0LvQtdC80LXQvdGC0L7QsiDRhNC+0YDQvNGLXG4gIHByb2ZpbGVFbGVtZW50cywgLy8g0Y3Qu9C10LzQtdC90YLRiyDRgdGC0YDQsNC90LjRhtGLINGBINC40L3RhNC+0YDQvNCw0YbQuNC10Lkg0L4g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C1XG4gIHByb2ZpbGVFZGl0QnV0dG9uLFxuICBwcm9maWxlTmFtZUlucHV0LFxuICBwcm9maWxlSm9iSW5wdXQsXG4gIHByb2ZpbGVFZGl0UG9wdXBTZWxlY3RvcixcbiAgYXZhdGFyQ2hhbmdlQnV0dG9uLFxuICBhdmF0YXJDaGFuZ2VQb3B1cFNlbGVjdG9yLFxuICBuZXdDYXJkQnV0dG9uLFxuICBuZXdDYXJkRm9ybSxcbiAgbmV3Q2FyZFBvcHVwU2VsZWN0b3IsXG4gIGltYWdlUG9wdXBTZWxlY3RvcixcbiAgY29uZmlybWF0aW9uUG9wdXBTZWxlY3Rvcixcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuXG5pbXBvcnQgeyBhcGlDb25maWcgfSBmcm9tIFwiLi4vdXRpbHMvYXBpQ29uZmlnLmpzXCI7XG4vL2ltcG9ydCBpbml0aWFsQ2FyZHMgZnJvbSBcIi4uL3V0aWxzL2luaXRpYWxDYXJkcy5qc1wiO1xuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XG5pbXBvcnQgUG9wdXBXaXRoQ29uZmlybWF0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiOyAvLyDQuNC80L/QvtGA0YIgY3NzLdGB0YLQuNC70LXQuSDQtNC70Y8g0YHQsdC+0YDQutC4INCyIFdlYnBhY2tcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XG5cbi8vKiDQn9C10YDQtdC80LXQvdC90YvQtSDQtNC70Y8gaWQg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC4INC70LDQudC60L7QslxubGV0IGFkZENhcmRMaWtlLCBkZWxldGVDYXJkTGlrZTtcblxuLyoqXG4gKiDQn9C10YDQtdC80LXQvdC90YvQtSDRgdGC0YDQsNC90LjRhtGLXG4gKi9cbmNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307IC8vINGF0YDQsNC90LXQvdC40LUg0Y3QutC30LXQvNC/0LvRj9GA0L7QsiDQstCw0LvQuNC00LDRgtC+0YDQvtCyINGE0L7RgNC8XG5jb25zdCBjYXJkcyA9IHt9OyAvLyDRhdGA0LDQvdC10L3QuNC1INC/0L7Qu9GD0YfQtdC90L3Ri9GFINC60LDRgNGC0L7Rh9C10LpcblxuLyoqXG4gKiDQlNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C1INGE0YPQvdC60YbQuNC4XG4gKi9cblxuLyoqXG4gKiDQl9Cw0L/Rg9GB0LrQsNC10YIg0LLQsNC70LjQtNCw0YbQuNGOINCy0YHQtdGFINGE0L7RgNC8INC90LAg0YHRgtGA0LDQvdC40YbQtVxuICogQHBhcmFtIHtvYmplY3R9IGZvcm1TZWxlY3RvcnMgLSDQntCx0YrQtdC60YIg0YEg0LrQu9Cw0YHRgdCw0LzQuCDQuCDRgdC10LvQtdC60YLQvtGA0LDQvNC4INGN0LvQtdC80LXQvdGC0L7QsiDRhNC+0YDQvDpcbiAqIC0gZm9ybVNlbGVjdG9yLFxuICogLSBpbnB1dFNlbGVjdG9yLFxuICogLSBzdWJtaXRCdXR0b25TZWxlY3RvcixcbiAqIC0gaW5hY3RpdmVCdXR0b25DbGFzcyxcbiAqIC0gaW5wdXRFcnJvckNsYXNzLFxuICogLSBlcnJvckNsYXNzXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRm9ybXMoZm9ybVNlbGVjdG9ycykge1xuICBjb25zdCBmb3JtRWxlbWVudHMgPSBBcnJheS5mcm9tKFxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZm9ybVNlbGVjdG9ycy5mb3JtU2VsZWN0b3IpXG4gICk7XG4gIGZvcm1FbGVtZW50cy5mb3JFYWNoKChmb3JtRWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtU2VsZWN0b3JzLCBmb3JtRWxlbWVudCk7XG4gICAgZm9ybVZhbGlkYXRvcnNbZm9ybUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKV0gPSBmb3JtO1xuICAgIGZvcm0uZW5hYmxlVmFsaWRhdGlvbigpO1xuICB9KTtcbn1cblxuLyoqXG4gKiDQodC+0LfQtNCw0LXRgiDRjdC70LXQvNC10L3RgiDQutCw0YDRgtC+0YfQutC4XG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtINCe0LHRitC10LrRgiDRgSDRgdC+0LTQtdGA0LbQuNC80YvQvCDQutCw0YDRgtC+0YfQutC4XG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYXJkKGRhdGEpIHtcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxuICAgIGRhdGEsXG4gICAgY2FyZFRlbXBsYXRlU2VsZWN0b3IsXG4gICAgaGFuZGxlQ2FyZENsaWNrLFxuICAgIGhhbmRsZURlbGV0ZUNhcmQsXG4gICAgaGFuZGxlTGlrZUNhcmQsXG4gICAgdXNlckluZm8uaWQsXG4gICAgKGFkZENhcmRMaWtlID0gKGRhdGEpID0+IHtcbiAgICAgIHJldHVybiBhcGkuc2V0TGlrZShkYXRhKTtcbiAgICB9KSxcbiAgICAoZGVsZXRlQ2FyZExpa2UgPSAoZGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIGFwaS5kZWxldGVMaWtlKGRhdGEpO1xuICAgIH0pXG4gICk7XG4gIGNhcmRzW2RhdGEuX2lkXSA9IGNhcmQ7XG4gIHJldHVybiBjYXJkLmdlbmVyYXRlQ2FyZCgpO1xufVxuXG4vKipcbiAqINCe0LHRgNCw0LHQsNGC0YvQstCw0LXRgiDQvdCw0LbQsNGC0LjQtSDQvdCwINC60LDRgNGC0LjQvdC60YMg0LrQsNGA0YLQvtGH0LrQuFxuICogQHBhcmFtIHtzdHJpbmd9IGltYWdlTGluayAtINCh0YHRi9C70LrQsCDQvdCwINC60LDRgNGC0LjQvdC60YNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0g0J7Qv9C40YHQsNC90LjQtSDQutCw0YDRgtC40L3QutC4XG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUNhcmRDbGljayhpbWFnZUxpbmssIHRleHQpIHtcbiAgaW1hZ2VQb3B1cC5vcGVuKGltYWdlTGluaywgdGV4dCk7XG59XG5cbi8qKlxuICog0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdGCINC90LDQttCw0YLQuNC1INC90LAg0YPQtNCw0LvQtdC90LjQtSDQutCw0YDRgtC+0YfQutC4XG4gKiBAcGFyYW0ge3N0cmluZ30gY2FyZElkIC0gSUQg0LrQsNGA0YLQvtGH0LrQuFxuICovXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVDYXJkKGNhcmRJZCkge1xuICBwb3B1cFdpdGhDb25maXJtYXRpb24uc2V0VGFyZ2V0KGNhcmRJZCk7XG4gIHBvcHVwV2l0aENvbmZpcm1hdGlvbi5vcGVuKCk7XG59XG5cbi8qKlxuICog0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdGCINC90LDQttCw0YLQuNC1INC90LAg0LvQsNC50Log0LIg0LrQsNGA0YLQvtGH0LrQtVxuICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIElEINC60LDRgNGC0L7Rh9C60LhcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMaWtlZCAtINCi0LXQutGD0YnQuNC5INGB0YLQsNGC0YPRgSDQu9Cw0LnQutCwXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuZnVuY3Rpb24gaGFuZGxlTGlrZUNhcmQoY2FyZElkLCBpc0xpa2VkKSB7XG4gIGNhcmRzW2NhcmRJZF0uYmxvY2tMaWtlQnV0dG9uKCk7XG4gIGFwaVxuICAgIC50b2dnbGVMaWtlKGNhcmRJZCwgaXNMaWtlZClcbiAgICAudGhlbigobGlrZXMpID0+IHtcbiAgICAgIGNhcmRzW2NhcmRJZF0uc2V0TGlrZXMobGlrZXMpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBjYXJkc1tjYXJkSWRdLnVuYmxvY2tMaWtlQnV0dG9uKCk7XG4gICAgfSk7XG59XG5cbi8qKlxuICog0JLRi9C/0L7Qu9C90Y/QtdGCINGB0LHRgNC+0YEg0YTQvtGA0LzRiyDQv9GA0Lgg0L7RgtC60YDRi9GC0LjQuCDQv9C+0L/QsNC/0LAg0YEg0YTQvtGA0LzQvtC5XG4gKi9cbmZ1bmN0aW9uIGhhbmRsZU9wZW5Gb3JtKCkge1xuICBmb3JtVmFsaWRhdG9yc1t0aGlzLmZvcm1OYW1lXS5oaWRlRXJyb3JzKCk7XG4gIGZvcm1WYWxpZGF0b3JzW3RoaXMuZm9ybU5hbWVdLmRpc2FibGVCdXR0b25TdGF0ZSgpO1xufVxuXG4vKipcbiAqINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60LvQsNGB0YHQvtCyXG4gKi9cbmNvbnN0IGFwaSA9IG5ldyBBcGkoYXBpQ29uZmlnKTtcblxuLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8gVXNlckluZm9cbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcbiAgbmFtZUVsZW1lbnQ6IHByb2ZpbGVFbGVtZW50cy5uYW1lLFxuICBqb2JFbGVtZW50OiBwcm9maWxlRWxlbWVudHMuam9iLFxuICBhdmF0YXJFbGVtZW50OiBwcm9maWxlRWxlbWVudHMuYXZhdGFyLFxufSk7XG5cbmNvbnN0IGNhcmRzU2VjdGlvbiA9IG5ldyBTZWN0aW9uKGNyZWF0ZUNhcmQsIGNhcmRzU2VsZWN0b3IpO1xuXG4vLyDQn9C+0L/QsNC/0YtcbmNvbnN0IHByb2ZpbGVFZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcbiAgcHJvZmlsZUVkaXRQb3B1cFNlbGVjdG9yLFxuICAoZGF0YSkgPT4ge1xuICAgIHByb2ZpbGVFZGl0UG9wdXAuYmxvY2tTdWJtaXRCdXR0b24oKTtcbiAgICBhcGlcbiAgICAgIC5zZXRVc2VySW5mbyhkYXRhKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICB1c2VySW5mby5maWxsKHJlcyk7XG4gICAgICAgIHVzZXJJbmZvLnJlbmRlck5hbWUoKTtcbiAgICAgICAgdXNlckluZm8ucmVuZGVySm9iKCk7XG4gICAgICAgIHByb2ZpbGVFZGl0UG9wdXAuY2xvc2UoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBwcm9maWxlRWRpdFBvcHVwLnVuYmxvY2tTdWJtaXRCdXR0b24oKTtcbiAgICAgIH0pO1xuICB9LFxuICBoYW5kbGVPcGVuRm9ybVxuKTtcblxuY29uc3QgYXZhdGFyQ2hhbmdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcbiAgYXZhdGFyQ2hhbmdlUG9wdXBTZWxlY3RvcixcbiAgKGRhdGEpID0+IHtcbiAgICBhdmF0YXJDaGFuZ2VQb3B1cC5ibG9ja1N1Ym1pdEJ1dHRvbigpO1xuXG4gICAgYXBpXG4gICAgICAuY2hhbmdlQXZhdGFyKGRhdGEubGluaylcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgdXNlckluZm8uZmlsbChyZXMpO1xuICAgICAgICB1c2VySW5mby5yZW5kZXJBdmF0YXIoKTtcbiAgICAgICAgYXZhdGFyQ2hhbmdlUG9wdXAuY2xvc2UoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBhdmF0YXJDaGFuZ2VQb3B1cC51bmJsb2NrU3VibWl0QnV0dG9uKCk7XG4gICAgICB9KTtcbiAgfSxcbiAgaGFuZGxlT3BlbkZvcm1cbik7XG5cbi8vIGF2YXRhckNoYW5nZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbi8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPIFBvcHVwINGBINC00L7QsdCw0LLQu9C10L3QuNC10Lwg0L3QvtCy0L7QuSDQutCw0YDRgtC+0YfQutC4XG5jb25zdCBuZXdDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcbiAgbmV3Q2FyZFBvcHVwU2VsZWN0b3IsXG4gIChkYXRhKSA9PiB7XG4gICAgbmV3Q2FyZFBvcHVwLmJsb2NrU3VibWl0QnV0dG9uKCk7XG5cbiAgICBhcGlcbiAgICAgIC5hZGROZXdDYXJkKGRhdGEpXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGNhcmRzU2VjdGlvbi5hZGRJdGVtKGNyZWF0ZUNhcmQocmVzKSwgdHJ1ZSk7XG4gICAgICAgIG5ld0NhcmRQb3B1cC5jbG9zZSgpO1xuICAgICAgICAvLyBmb3JtVmFsaWRhdG9yc1tuZXdDYXJkRm9ybS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpXS5kaXNhYmxlQnV0dG9uU3RhdGUoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBuZXdDYXJkUG9wdXAudW5ibG9ja1N1Ym1pdEJ1dHRvbigpO1xuICAgICAgfSk7XG4gIH0sXG4gIGhhbmRsZU9wZW5Gb3JtXG4pO1xuXG4vLyDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyBQb3B1cCDRgSDRg9Cy0LXQu9C40YfQtdC90L3Ri9C8INC40LfQvtCx0YDQsNC20LXQvdC40LXQvFxuY29uc3QgaW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZShpbWFnZVBvcHVwU2VsZWN0b3IpO1xuXG4vLyDQo9GB0YLQsNC90L7QstC60LAg0YHQu9GD0YjQsNGC0LXQu9C10Lkg0YHQvtCx0YvRgtC40LlcbnByb2ZpbGVFZGl0UG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuY29uc3QgcG9wdXBXaXRoQ29uZmlybWF0aW9uID0gbmV3IFBvcHVwV2l0aENvbmZpcm1hdGlvbihcbiAgY29uZmlybWF0aW9uUG9wdXBTZWxlY3RvcixcbiAgKGNhcmRJZCkgPT4ge1xuICAgIGFwaVxuICAgICAgLmRlbGV0ZUNhcmQoY2FyZElkKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjYXJkc1tjYXJkSWRdLmRlbGV0ZSgpO1xuICAgICAgICBwb3B1cFdpdGhDb25maXJtYXRpb24uY2xvc2UoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgfVxuKTtcblxuLy8gcG9wdXBXaXRoQ29uZmlybWF0aW9uLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbi8qKlxuICog0J/QtdGA0LLQvtC90LDRh9Cw0LvRjNC90L7QtSDQv9C+0LvRg9GH0LXQvdC40LUg0LTQsNC90L3Ri9GFINC+0YIg0YHQtdGA0LLQtdGA0LBcbiAqL1xuUHJvbWlzZS5hbGwoW2FwaS5nZXRVc2VySW5mbygpLCBhcGkuZ2V0SW5pdGlhbENhcmRzKCldKVxuICAudGhlbigocmVzdWx0cykgPT4ge1xuICAgIHVzZXJJbmZvLmZpbGwocmVzdWx0c1swXSk7XG4gICAgdXNlckluZm8ucmVuZGVyTmFtZSgpO1xuICAgIHVzZXJJbmZvLnJlbmRlckpvYigpO1xuICAgIHVzZXJJbmZvLnJlbmRlckF2YXRhcigpO1xuICAgIGNhcmRzU2VjdGlvbi5yZW5kZXJJdGVtcyhyZXN1bHRzWzFdKTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG5cbi8qKlxuICog0KPRgdGC0LDQvdC+0LLQutCwINGB0LvRg9GI0LDRgtC10LvQtdC5INC00LvRjyDRgNCw0LHQvtGC0Ysg0L/QvtC/0LDQv9C+0LJcbiAqL1xuLy8g0J/QvtC/0LDQvyDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINC40L3RhNC+0YDQvNCw0YbQuNC4XG5wcm9maWxlRWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICh7IG5hbWU6IHByb2ZpbGVOYW1lSW5wdXQudmFsdWUsIGpvYjogcHJvZmlsZUpvYklucHV0LnZhbHVlIH0gPVxuICAgIHVzZXJJbmZvLmdldFVzZXJJbmZvKCkpO1xuICAvLyBwcm9maWxlRWRpdFBvcHVwLnNldElucHV0VmFsdWVzKHVzZXJJbmZvLmdldFVzZXJJbmZvKCkpO1xuICBwcm9maWxlRWRpdFBvcHVwLm9wZW4oKTtcbiAgcHJvZmlsZU5hbWVJbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIpKTtcbiAgcHJvZmlsZUpvYklucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIikpO1xufSk7XG5cbi8vINCf0L7Qv9Cw0L8g0L7QsdC90L7QstC70LXQvdC40Y8g0LDQstCw0YLQsNGA0LBcbmF2YXRhckNoYW5nZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmF2YXRhckNoYW5nZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBhdmF0YXJDaGFuZ2VQb3B1cC5vcGVuKCk7XG59KTtcblxuLy8g0J/QvtC/0LDQvyDQtNC+0LHQsNCy0LvQtdC90LjRjyDQvdC+0LLQvtC5INC60LDRgNGC0L7Rh9C60Lhcbm5ld0NhcmRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5uZXdDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gIG5ld0NhcmRQb3B1cC5vcGVuKCk7XG59KTtcblxuLy8gY29uc3QgcG9wdXBJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIi5wb3B1cF90eXBlX2ltYWdlXCIpO1xuLy8gcG9wdXBJbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xuXG4vLyDQn9C+0L/QsNC/INGBINC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNC8INC40L3RhNC+0YDQvNCw0YbQuNC4XG5wb3B1cFdpdGhDb25maXJtYXRpb24uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy8g0J/QvtC/0LDQvyDRgSDRg9Cy0LXQu9C40YfQtdC90L3Ri9C8INC40LfQvtCx0YDQsNC20LXQvdC40LXQvFxuaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG4vLyDQktGL0LfQvtCyINGE0YPQvdC60YbQuNC5INC4INC80LXRgtC+0LTQvtCyINC/0YDQuCDQt9Cw0LPRgNGD0LfQutC1INGB0YLRgNCw0L3QuNGG0Ytcbi8vY2FyZHNTZWN0aW9uLnJlbmRlckl0ZW1zKCk7XG5cbi8qKlxuICog0JLQutC70Y7Rh9C10L3QuNC1INCy0LDQu9C40LTQsNGG0LjQuCDRhNC+0YDQvFxuICovXG52YWxpZGF0ZUZvcm1zKGZvcm1TZWxlY3RvcnMpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcbiAgLyoqXG4gICAqINCe0YLQstC10YfQsNC10YIg0LfQsCDQvtGB0YPRidC10YHRgtCy0LvQtdC90LjQtSDQuCDQvtCx0YDQsNCx0L7RgtC60YMg0YHQtdGC0LXQstGL0YUg0LfQsNC/0YDQvtGB0L7QsiDQuiDRgdC10YDQstC10YDRg1xuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9INCa0L7QvdGE0LjQsyDQt9Cw0L/RgNC+0YHQvtCyINC6INGB0LXRgNCy0LXRgNGDOlxuICAgKiAtIGJhc2VVcmwgLSDQkdCw0LfQvtCy0LDRjyDRh9Cw0YHRgtGMIHVybC3QsNC00YDQtdGB0LAg0YHQtdGA0LLQtdGA0LBcbiAgICogLSBoZWFkZXJzIC0g0JfQsNCz0L7Qu9C+0LLQutC4INC30LDQv9GA0L7RgdCwLCDQsdGD0LTRg9GCINC/0LXRgNC10LTQsNCy0LDRgtGM0YHRjyDQv9GA0Lgg0LrQsNC20LTQvtC8INC+0LHRgNCw0YnQtdC90LjQuFxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBiYXNlVXJsLCBoZWFkZXJzIH0pIHtcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLl9oZWFkZXJzID0gaGVhZGVycztcbiAgICAvLyB0aGlzLl91c2VySW5mb1VybCA9IFwiL3VzZXJzL21lXCI7XG4gICAgLy8gdGhpcy5fY2FyZHNVcmwgPSBcIi9jYXJkc1wiO1xuICB9XG5cbiAgLy8qINCf0YDQvtCy0LXRgNC60LAg0YHRgtCw0YLRg9GB0LAg0LfQsNC/0YDQvtGB0LBcbiAgX3JlcXVlc3RSZXN1bHQocmVzKSB7XG4gICAgaWYgKHJlcy5vaykge1xuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgYNCn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0Lo6INCe0YjQuNCx0LrQsCAke3Jlcy5zdGF0dXN9IC0gJHtyZXMuc3RhdHVzVGV4dH1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LvRg9GH0LDQtdGCINC00LDQvdC90YvQtSDRgtC10LrRg9GJ0LXQs9C+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g0J/RgNC+0LzQuNGBINGBINC+0YLQstC10YLQvtC8INGB0LXRgNCy0LXRgNCwOiDQvtCx0YrQtdC60YIg0YLQtdC60YPRidC10LPQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICovXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYDtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9yZXF1ZXN0UmVzdWx0KHJlcykpO1xuICB9XG5cbiAgLyoqXG4gICAqINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCINC90L7QstGL0LUg0LjQvNGPINC4INC/0YDQvtGE0LXRgdGB0LjRjiDRgtC10LrRg9GJ0LXQs9C+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgKiBAcGFyYW0ge29iamVjdH0g0J7QsdGK0LXQutGCINGBINC+0LHQvdC+0LLQu9GP0LXQvNGL0LzQuCDQv9Cw0YDQsNC80LXRgtGA0LDQvNC4OlxuICAgKiAtIG5hbWUgLSDQuNC80Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAqIC0gam9iIC0g0L/RgNC+0YTQtdGB0YHQuNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g0J/RgNC+0LzQuNGBINGBINC+0YLQstC10YLQvtC8INGB0LXRgNCy0LXRgNCwOiDQvtCx0L3QvtCy0LvQtdC90L3Ri9C5INC+0LHRitC10LrRgiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICovXG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgam9iIH0pIHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWA7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGFib3V0OiBqb2IsXG4gICAgICB9KSxcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX3JlcXVlc3RSZXN1bHQocmVzKSk7XG4gIH1cblxuICAvKipcbiAgICog0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10YIg0L3QvtCy0YvQuSDQsNCy0LDRgtCw0YAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIC0g0KHRgdGL0LvQutCwINC90LAg0LrQsNGA0YLQuNC90LrRg1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g0J/RgNC+0LzQuNGBINGBINC+0YLQstC10YLQvtC8INGB0LXRgNCy0LXRgNCwOiDQvtCx0L3QvtCy0LvQtdC90L3Ri9C5INC+0LHRitC10LrRgiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICovXG4gIGNoYW5nZUF2YXRhcihsaW5rKSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYDtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgYXZhdGFyOiBsaW5rLFxuICAgICAgfSksXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9yZXF1ZXN0UmVzdWx0KHJlcykpO1xuICB9XG5cbiAgLyoqXG4gICAqINCf0L7Qu9GD0YfQsNC10YIg0LjRgdGF0L7QtNC90YvQtSDQutCw0YDRgtC+0YfQutC4INC00LvRjyDQvtGC0YDQuNGB0L7QstC60LhcbiAgICogQHJldHVybnMge1Byb21pc2V9INCf0YDQvtC80LjRgSDRgSDQvtGC0LLQtdGC0L7QvCDRgdC10YDQstC10YDQsDog0LzQsNGB0YHQuNCyINC60LDRgNGC0L7Rh9C10LpcbiAgICovXG4gIGdldEluaXRpYWxDYXJkcygpIHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2A7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pLnRoZW4oKHJlcykgPT4gdGhpcy5fcmVxdWVzdFJlc3VsdChyZXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQlNC+0LHQsNCy0LvRj9C10YIg0L3QvtCy0YPRjiDQutCw0YDRgtC+0YfQutGDXG4gICAqIEBwYXJhbSB7b2JqZWN0fSDQn9Cw0YDQsNC80LXRgtGA0Ysg0LTQvtCx0LDQstC70Y/QtdC80L7QuSDQutCw0YDRgtC+0YfQutC4OlxuICAgKiAtIG5hbWUgLSDQvtGC0L7QsdGA0LDQttCw0LXQvNC+0LUg0LjQvNGPXG4gICAqIC0gbGluayAtINGB0YHRi9C70LrQsCDQvdCwINC00L7QsdCw0LLQu9GP0LXQvNGD0Y4g0LrQsNGA0YLQuNC90LrRg1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g0J/RgNC+0LzQuNGBINGBINC+0YLQstC10YLQvtC8INGB0LXRgNCy0LXRgNCwOiDQvtCx0YrQtdC60YIg0YHQvtC30LTQsNC90L3QvtC5INC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIGFkZE5ld0NhcmQoeyBuYW1lLCBsaW5rIH0pIHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2A7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbGluayxcbiAgICAgIH0pLFxuICAgIH0pLnRoZW4oKHJlcykgPT4gdGhpcy5fcmVxdWVzdFJlc3VsdChyZXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQo9C00LDQu9GP0LXRgiDQutCw0YDRgtC+0YfQutGDINGBINGB0LXRgNCy0LXRgNCwXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYXJkSWQgLSBJRCDQutCw0YDRgtC+0YfQutC4XG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSDQn9GA0L7QvNC40YEg0YEg0L7RgtCy0LXRgtC+0Lwg0YHQtdGA0LLQtdGA0LBcbiAgICovXG4gIGRlbGV0ZUNhcmQoY2FyZElkKSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9YDtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9yZXF1ZXN0UmVzdWx0KHJlcykpO1xuICB9XG5cbiAgLyoqXG4gICAqINCh0YLQsNCy0LjRgiDQu9Cw0LnQuiDQvdCwINC60LDRgNGC0L7Rh9C60YNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIElEINC60LDRgNGC0L7Rh9C60LhcbiAgICogQHJldHVybnMge1Byb21pc2V9INCf0YDQvtC80LjRgSDRgSDQvNCw0YHRgdC40LLQvtC8INC90L7QstGL0YUg0LvQsNC50LrQvtCyINC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIHNldExpa2UoY2FyZElkKSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYDtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9yZXF1ZXN0UmVzdWx0KHJlcykpO1xuICB9XG4gIC8qKlxuICAgKiDQo9C00LDQu9GP0LXRgiDQu9Cw0LnQuiDRgSDQutCw0YDRgtC+0YfQutC4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYXJkSWQgLSBJRCDQutCw0YDRgtC+0YfQutC4XG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSDQn9GA0L7QvNC40YEg0YEg0LzQsNGB0YHQuNCy0L7QvCDQvdC+0LLRi9GFINC70LDQudC60L7QsiDQutCw0YDRgtC+0YfQutC4XG4gICAqL1xuICBkZWxldGVMaWtlKGNhcmRJZCkge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2A7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pLnRoZW4oKHJlcykgPT4gdGhpcy5fcmVxdWVzdFJlc3VsdChyZXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C10YDQtdC60LvRjtGH0LDQtdGCINC70LDQudC6INC60LDRgNGC0L7Rh9C60LhcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIElEINC60LDRgNGC0L7Rh9C60LhcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0xpa2VkIC0g0KLQtdC60YPRidC40Lkg0YHRgtCw0YLRg9GBINC70LDQudC60LBcbiAgICogQHJldHVybnMge1Byb21pc2V9INCf0YDQvtC80LjRgSDRgSDQvNCw0YHRgdC40LLQvtC8INC90L7QstGL0YUg0LvQsNC50LrQvtCyINC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIHRvZ2dsZUxpa2UoY2FyZElkLCBpc0xpa2VkKSB7XG4gICAgaWYgKGlzTGlrZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUxpa2UoY2FyZElkKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlcy5saWtlcztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRMaWtlKGNhcmRJZCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIHJldHVybiByZXMubGlrZXM7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmb3JtU2VsZWN0b3IiLCJmb3JtU2VsZWN0b3JzIiwiaW5wdXRTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJwcm9maWxlQXZhdGFyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicHJvZmlsZUVsZW1lbnRzIiwibmFtZSIsImpvYiIsImF2YXRhciIsInByb2ZpbGVFZGl0QnV0dG9uIiwicHJvZmlsZUVkaXRQb3B1cFNlbGVjdG9yIiwicHJvZmlsZUVkaXRQb3B1cEVsZW1lbnQiLCJwcm9maWxlTmFtZUlucHV0IiwicHJvZmlsZUpvYklucHV0IiwiYXZhdGFyQ2hhbmdlQnV0dG9uIiwibmV3Q2FyZFBvcHVwU2VsZWN0b3IiLCJuZXdDYXJkUG9wdXBFbGVtZW50IiwibmV3Q2FyZEJ1dHRvbiIsImFwaUNvbmZpZyIsImJhc2VVcmwiLCJjb25jYXQiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsIkNhcmQiLCJfcmVmIiwidGVtcGxhdGVTZWxlY3RvciIsImhhbmRsZUNhcmRDbGljayIsImhhbmRsZURlbGV0ZUNhcmQiLCJoYW5kbGVMaWtlQ2FyZCIsInVzZXJJZCIsImxpbmsiLCJsaWtlcyIsIm93bmVyIiwiY3JlYXRlZEF0IiwiX2lkIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl9uYW1lIiwiX2xpbmsiLCJfbGlrZXMiLCJfdGVtcGxhdGVTZWxlY3RvciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfaGFuZGxlRGVsZXRlQ2FyZCIsIl9oYW5kbGVMaWtlQ2FyZCIsIl9vd25lciIsIl9jcmVhdGVkQXQiLCJfdXNlcklkIiwiX2lzTGlrZWQiLCJfY2hlY2tJc0xpa2VkIiwia2V5IiwidmFsdWUiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2VsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJfbGlrZUJ1dHRvbiIsImltYWdlIiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJzZXRMaWtlcyIsInJlbW92ZSIsIl9zZXRFdmVudGxpc3RlbmVycyIsIl90aGlzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9saWtlQ2FyZCIsIl9oYW5kbGVEZWxldGUiLCJkaXNhYmxlZCIsIl90aGlzMiIsInNvbWUiLCJwZXJzb24iLCJsaWtlQ291bnQiLCJsaWtlQnV0dG9uIiwibGVuZ3RoIiwiY2xhc3NMaXN0IiwiYWRkIiwiRm9ybVZhbGlkYXRvciIsImZvcm1DbGFzc2VzIiwiZm9ybUVsZW1lbnQiLCJfZm9ybUVsZW1lbnQiLCJfZm9ybVNlbGVjdG9yIiwiX2lucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsIl9pbnB1dEVsZW1lbnRzIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIl9idXR0b25FbGVtZW50IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiZm9yRWFjaCIsImlucHV0RWxlbWVudCIsIl9pc1ZhbGlkIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oaWRlSW5wdXRFcnJvciIsIl9zaG93SW5wdXRFcnJvciIsInZhbGlkYXRpb25NZXNzYWdlIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JFbGVtZW50IiwiaWQiLCJpbnB1dCIsIl9oYXNJbnZhbGlkSW5wdXQiLCJkaXNhYmxlQnV0dG9uU3RhdGUiLCJfZW5hYmxlQnV0dG9uU3RhdGUiLCJTZWN0aW9uIiwicmVuZGVyZXIiLCJjb250YWluZXJTZWxlY3RvciIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJpdGVtcyIsIml0ZW0iLCJlbGVtZW50IiwiYWRkSXRlbSIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInByZXBlbmQiLCJhcHBlbmQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXAiLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwiX3BvcHVwQ2xvc2VCdXR0b24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZ0IiwiY2xvc2UiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiUG9wdXBXaXRoSW1hZ2UiLCJfUG9wdXAiLCJfaW5oZXJpdHMiLCJfc3VwZXIiLCJjYWxsIiwiX2ZpZ3VyZUVsZW1lbnQiLCJfY2FwdGlvbkVsZW1lbnQiLCJpbWFnZUxpbmsiLCJ0ZXh0IiwiX2dldCIsIl9nZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVTdWJtaXQiLCJoYW5kbGVPcGVuRm9ybSIsIl9oYW5kbGVTdWJtaXQiLCJfZm9ybSIsIl9pbnB1dFZhbHVlcyIsIl9oYW5kbGVPcGVuRm9ybSIsImZvcm1OYW1lIiwiZ2V0QXR0cmlidXRlIiwiX2FsbElucHV0cyIsIl9zdWJtaXRCdXR0b24iLCJfb3JpZ2luYWxCdXR0b25UZXh0IiwiX3RoaXMzIiwicHJldmVudERlZmF1bHQiLCJfc3VibWl0IiwiX2dldElucHV0VmFsdWVzIiwiYmxvY2tlZEJ1dHRvblRleHQiLCJfYmxvY2tlZEJ1dHRvblRleHQiLCJyZXNldCIsIlBvcHVwV2l0aENvbmZpcm1hdGlvbiIsIl9idXR0b24iLCJfdGFyZ2V0IiwiVXNlckluZm8iLCJuYW1lRWxlbWVudCIsImpvYkVsZW1lbnQiLCJhdmF0YXJFbGVtZW50IiwiX25hbWVFbGVtZW50IiwiX2pvYkVsZW1lbnQiLCJfYXZhdGFyRWxlbWVudCIsIl9yZWYyIiwiYWJvdXQiLCJjb2hvcnQiLCJfam9iIiwiX2F2YXRhciIsIl9jb2hvcnQiLCJmb3JtVmFsaWRhdG9ycyIsImNhcmRzIiwiY3JlYXRlQ2FyZCIsImRhdGEiLCJjYXJkIiwidXNlckluZm8iLCJhcGkiLCJzZXRMaWtlIiwiZGVsZXRlTGlrZSIsImdlbmVyYXRlQ2FyZCIsImltYWdlUG9wdXAiLCJvcGVuIiwiY2FyZElkIiwicG9wdXBXaXRoQ29uZmlybWF0aW9uIiwic2V0VGFyZ2V0IiwiaXNMaWtlZCIsImJsb2NrTGlrZUJ1dHRvbiIsInRvZ2dsZUxpa2UiLCJ0aGVuIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJmaW5hbGx5IiwidW5ibG9ja0xpa2VCdXR0b24iLCJoaWRlRXJyb3JzIiwiQXBpIiwiX2Jhc2VVcmwiLCJfaGVhZGVycyIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwidXJsIiwiZmV0Y2giLCJtZXRob2QiLCJfcmVxdWVzdFJlc3VsdCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiX3RoaXM0IiwiX3JlZjMiLCJfdGhpczUiLCJfdGhpczYiLCJfdGhpczciLCJfdGhpczgiLCJjYXJkc1NlY3Rpb24iLCJwcm9maWxlRWRpdFBvcHVwIiwiYmxvY2tTdWJtaXRCdXR0b24iLCJzZXRVc2VySW5mbyIsImZpbGwiLCJyZW5kZXJOYW1lIiwicmVuZGVySm9iIiwidW5ibG9ja1N1Ym1pdEJ1dHRvbiIsImF2YXRhckNoYW5nZVBvcHVwIiwiY2hhbmdlQXZhdGFyIiwicmVuZGVyQXZhdGFyIiwibmV3Q2FyZFBvcHVwIiwiYWRkTmV3Q2FyZCIsInNldEV2ZW50TGlzdGVuZXJzIiwiZGVsZXRlQ2FyZCIsImRlbGV0ZSIsImFsbCIsImdldFVzZXJJbmZvIiwiZ2V0SW5pdGlhbENhcmRzIiwicmVzdWx0cyIsInJlbmRlckl0ZW1zIiwiX3VzZXJJbmZvJGdldFVzZXJJbmZvIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiZm9ybSIsImVuYWJsZVZhbGlkYXRpb24iLCJ2YWxpZGF0ZUZvcm1zIl0sInNvdXJjZVJvb3QiOiIifQ==